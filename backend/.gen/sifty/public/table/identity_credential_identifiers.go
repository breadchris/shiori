//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var IdentityCredentialIdentifiers = newIdentityCredentialIdentifiersTable("public", "identity_credential_identifiers", "")

type identityCredentialIdentifiersTable struct {
	postgres.Table

	//Columns
	ID                       postgres.ColumnString
	Identifier               postgres.ColumnString
	IdentityCredentialID     postgres.ColumnString
	CreatedAt                postgres.ColumnTimestamp
	UpdatedAt                postgres.ColumnTimestamp
	Nid                      postgres.ColumnString
	IdentityCredentialTypeID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type IdentityCredentialIdentifiersTable struct {
	identityCredentialIdentifiersTable

	EXCLUDED identityCredentialIdentifiersTable
}

// AS creates new IdentityCredentialIdentifiersTable with assigned alias
func (a IdentityCredentialIdentifiersTable) AS(alias string) *IdentityCredentialIdentifiersTable {
	return newIdentityCredentialIdentifiersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new IdentityCredentialIdentifiersTable with assigned schema name
func (a IdentityCredentialIdentifiersTable) FromSchema(schemaName string) *IdentityCredentialIdentifiersTable {
	return newIdentityCredentialIdentifiersTable(schemaName, a.TableName(), a.Alias())
}

func newIdentityCredentialIdentifiersTable(schemaName, tableName, alias string) *IdentityCredentialIdentifiersTable {
	return &IdentityCredentialIdentifiersTable{
		identityCredentialIdentifiersTable: newIdentityCredentialIdentifiersTableImpl(schemaName, tableName, alias),
		EXCLUDED:                           newIdentityCredentialIdentifiersTableImpl("", "excluded", ""),
	}
}

func newIdentityCredentialIdentifiersTableImpl(schemaName, tableName, alias string) identityCredentialIdentifiersTable {
	var (
		IDColumn                       = postgres.StringColumn("id")
		IdentifierColumn               = postgres.StringColumn("identifier")
		IdentityCredentialIDColumn     = postgres.StringColumn("identity_credential_id")
		CreatedAtColumn                = postgres.TimestampColumn("created_at")
		UpdatedAtColumn                = postgres.TimestampColumn("updated_at")
		NidColumn                      = postgres.StringColumn("nid")
		IdentityCredentialTypeIDColumn = postgres.StringColumn("identity_credential_type_id")
		allColumns                     = postgres.ColumnList{IDColumn, IdentifierColumn, IdentityCredentialIDColumn, CreatedAtColumn, UpdatedAtColumn, NidColumn, IdentityCredentialTypeIDColumn}
		mutableColumns                 = postgres.ColumnList{IdentifierColumn, IdentityCredentialIDColumn, CreatedAtColumn, UpdatedAtColumn, NidColumn, IdentityCredentialTypeIDColumn}
	)

	return identityCredentialIdentifiersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                       IDColumn,
		Identifier:               IdentifierColumn,
		IdentityCredentialID:     IdentityCredentialIDColumn,
		CreatedAt:                CreatedAtColumn,
		UpdatedAt:                UpdatedAtColumn,
		Nid:                      NidColumn,
		IdentityCredentialTypeID: IdentityCredentialTypeIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
