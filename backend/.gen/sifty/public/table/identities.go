//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Identities = newIdentitiesTable("public", "identities", "")

type identitiesTable struct {
	postgres.Table

	//Columns
	ID             postgres.ColumnString
	SchemaID       postgres.ColumnString
	Traits         postgres.ColumnString
	CreatedAt      postgres.ColumnTimestamp
	UpdatedAt      postgres.ColumnTimestamp
	Nid            postgres.ColumnString
	State          postgres.ColumnString
	StateChangedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type IdentitiesTable struct {
	identitiesTable

	EXCLUDED identitiesTable
}

// AS creates new IdentitiesTable with assigned alias
func (a IdentitiesTable) AS(alias string) *IdentitiesTable {
	return newIdentitiesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new IdentitiesTable with assigned schema name
func (a IdentitiesTable) FromSchema(schemaName string) *IdentitiesTable {
	return newIdentitiesTable(schemaName, a.TableName(), a.Alias())
}

func newIdentitiesTable(schemaName, tableName, alias string) *IdentitiesTable {
	return &IdentitiesTable{
		identitiesTable: newIdentitiesTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newIdentitiesTableImpl("", "excluded", ""),
	}
}

func newIdentitiesTableImpl(schemaName, tableName, alias string) identitiesTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		SchemaIDColumn       = postgres.StringColumn("schema_id")
		TraitsColumn         = postgres.StringColumn("traits")
		CreatedAtColumn      = postgres.TimestampColumn("created_at")
		UpdatedAtColumn      = postgres.TimestampColumn("updated_at")
		NidColumn            = postgres.StringColumn("nid")
		StateColumn          = postgres.StringColumn("state")
		StateChangedAtColumn = postgres.TimestampColumn("state_changed_at")
		allColumns           = postgres.ColumnList{IDColumn, SchemaIDColumn, TraitsColumn, CreatedAtColumn, UpdatedAtColumn, NidColumn, StateColumn, StateChangedAtColumn}
		mutableColumns       = postgres.ColumnList{SchemaIDColumn, TraitsColumn, CreatedAtColumn, UpdatedAtColumn, NidColumn, StateColumn, StateChangedAtColumn}
	)

	return identitiesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		SchemaID:       SchemaIDColumn,
		Traits:         TraitsColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		Nid:            NidColumn,
		State:          StateColumn,
		StateChangedAt: StateChangedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
