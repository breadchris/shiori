//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SelfserviceRecoveryFlows = newSelfserviceRecoveryFlowsTable("public", "selfservice_recovery_flows", "")

type selfserviceRecoveryFlowsTable struct {
	postgres.Table

	//Columns
	ID                  postgres.ColumnString
	RequestURL          postgres.ColumnString
	IssuedAt            postgres.ColumnTimestamp
	ExpiresAt           postgres.ColumnTimestamp
	ActiveMethod        postgres.ColumnString
	CsrfToken           postgres.ColumnString
	State               postgres.ColumnString
	RecoveredIdentityID postgres.ColumnString
	CreatedAt           postgres.ColumnTimestamp
	UpdatedAt           postgres.ColumnTimestamp
	Type                postgres.ColumnString
	UI                  postgres.ColumnString
	Nid                 postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SelfserviceRecoveryFlowsTable struct {
	selfserviceRecoveryFlowsTable

	EXCLUDED selfserviceRecoveryFlowsTable
}

// AS creates new SelfserviceRecoveryFlowsTable with assigned alias
func (a SelfserviceRecoveryFlowsTable) AS(alias string) *SelfserviceRecoveryFlowsTable {
	return newSelfserviceRecoveryFlowsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SelfserviceRecoveryFlowsTable with assigned schema name
func (a SelfserviceRecoveryFlowsTable) FromSchema(schemaName string) *SelfserviceRecoveryFlowsTable {
	return newSelfserviceRecoveryFlowsTable(schemaName, a.TableName(), a.Alias())
}

func newSelfserviceRecoveryFlowsTable(schemaName, tableName, alias string) *SelfserviceRecoveryFlowsTable {
	return &SelfserviceRecoveryFlowsTable{
		selfserviceRecoveryFlowsTable: newSelfserviceRecoveryFlowsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                      newSelfserviceRecoveryFlowsTableImpl("", "excluded", ""),
	}
}

func newSelfserviceRecoveryFlowsTableImpl(schemaName, tableName, alias string) selfserviceRecoveryFlowsTable {
	var (
		IDColumn                  = postgres.StringColumn("id")
		RequestURLColumn          = postgres.StringColumn("request_url")
		IssuedAtColumn            = postgres.TimestampColumn("issued_at")
		ExpiresAtColumn           = postgres.TimestampColumn("expires_at")
		ActiveMethodColumn        = postgres.StringColumn("active_method")
		CsrfTokenColumn           = postgres.StringColumn("csrf_token")
		StateColumn               = postgres.StringColumn("state")
		RecoveredIdentityIDColumn = postgres.StringColumn("recovered_identity_id")
		CreatedAtColumn           = postgres.TimestampColumn("created_at")
		UpdatedAtColumn           = postgres.TimestampColumn("updated_at")
		TypeColumn                = postgres.StringColumn("type")
		UIColumn                  = postgres.StringColumn("ui")
		NidColumn                 = postgres.StringColumn("nid")
		allColumns                = postgres.ColumnList{IDColumn, RequestURLColumn, IssuedAtColumn, ExpiresAtColumn, ActiveMethodColumn, CsrfTokenColumn, StateColumn, RecoveredIdentityIDColumn, CreatedAtColumn, UpdatedAtColumn, TypeColumn, UIColumn, NidColumn}
		mutableColumns            = postgres.ColumnList{RequestURLColumn, IssuedAtColumn, ExpiresAtColumn, ActiveMethodColumn, CsrfTokenColumn, StateColumn, RecoveredIdentityIDColumn, CreatedAtColumn, UpdatedAtColumn, TypeColumn, UIColumn, NidColumn}
	)

	return selfserviceRecoveryFlowsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                  IDColumn,
		RequestURL:          RequestURLColumn,
		IssuedAt:            IssuedAtColumn,
		ExpiresAt:           ExpiresAtColumn,
		ActiveMethod:        ActiveMethodColumn,
		CsrfToken:           CsrfTokenColumn,
		State:               StateColumn,
		RecoveredIdentityID: RecoveredIdentityIDColumn,
		CreatedAt:           CreatedAtColumn,
		UpdatedAt:           UpdatedAtColumn,
		Type:                TypeColumn,
		UI:                  UIColumn,
		Nid:                 NidColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
