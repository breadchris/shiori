//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Sessions = newSessionsTable("public", "sessions", "")

type sessionsTable struct {
	postgres.Table

	//Columns
	ID                    postgres.ColumnString
	IssuedAt              postgres.ColumnTimestamp
	ExpiresAt             postgres.ColumnTimestamp
	AuthenticatedAt       postgres.ColumnTimestamp
	IdentityID            postgres.ColumnString
	CreatedAt             postgres.ColumnTimestamp
	UpdatedAt             postgres.ColumnTimestamp
	Token                 postgres.ColumnString
	Active                postgres.ColumnBool
	Nid                   postgres.ColumnString
	LogoutToken           postgres.ColumnString
	Aal                   postgres.ColumnString
	AuthenticationMethods postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SessionsTable struct {
	sessionsTable

	EXCLUDED sessionsTable
}

// AS creates new SessionsTable with assigned alias
func (a SessionsTable) AS(alias string) *SessionsTable {
	return newSessionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SessionsTable with assigned schema name
func (a SessionsTable) FromSchema(schemaName string) *SessionsTable {
	return newSessionsTable(schemaName, a.TableName(), a.Alias())
}

func newSessionsTable(schemaName, tableName, alias string) *SessionsTable {
	return &SessionsTable{
		sessionsTable: newSessionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newSessionsTableImpl("", "excluded", ""),
	}
}

func newSessionsTableImpl(schemaName, tableName, alias string) sessionsTable {
	var (
		IDColumn                    = postgres.StringColumn("id")
		IssuedAtColumn              = postgres.TimestampColumn("issued_at")
		ExpiresAtColumn             = postgres.TimestampColumn("expires_at")
		AuthenticatedAtColumn       = postgres.TimestampColumn("authenticated_at")
		IdentityIDColumn            = postgres.StringColumn("identity_id")
		CreatedAtColumn             = postgres.TimestampColumn("created_at")
		UpdatedAtColumn             = postgres.TimestampColumn("updated_at")
		TokenColumn                 = postgres.StringColumn("token")
		ActiveColumn                = postgres.BoolColumn("active")
		NidColumn                   = postgres.StringColumn("nid")
		LogoutTokenColumn           = postgres.StringColumn("logout_token")
		AalColumn                   = postgres.StringColumn("aal")
		AuthenticationMethodsColumn = postgres.StringColumn("authentication_methods")
		allColumns                  = postgres.ColumnList{IDColumn, IssuedAtColumn, ExpiresAtColumn, AuthenticatedAtColumn, IdentityIDColumn, CreatedAtColumn, UpdatedAtColumn, TokenColumn, ActiveColumn, NidColumn, LogoutTokenColumn, AalColumn, AuthenticationMethodsColumn}
		mutableColumns              = postgres.ColumnList{IssuedAtColumn, ExpiresAtColumn, AuthenticatedAtColumn, IdentityIDColumn, CreatedAtColumn, UpdatedAtColumn, TokenColumn, ActiveColumn, NidColumn, LogoutTokenColumn, AalColumn, AuthenticationMethodsColumn}
	)

	return sessionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                    IDColumn,
		IssuedAt:              IssuedAtColumn,
		ExpiresAt:             ExpiresAtColumn,
		AuthenticatedAt:       AuthenticatedAtColumn,
		IdentityID:            IdentityIDColumn,
		CreatedAt:             CreatedAtColumn,
		UpdatedAt:             UpdatedAtColumn,
		Token:                 TokenColumn,
		Active:                ActiveColumn,
		Nid:                   NidColumn,
		LogoutToken:           LogoutTokenColumn,
		Aal:                   AalColumn,
		AuthenticationMethods: AuthenticationMethodsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
