//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserBookmarks = newUserBookmarksTable("public", "user_bookmarks", "")

type userBookmarksTable struct {
	postgres.Table

	//Columns
	ID         postgres.ColumnString
	UserID     postgres.ColumnString
	BookmarkID postgres.ColumnString
	Name       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserBookmarksTable struct {
	userBookmarksTable

	EXCLUDED userBookmarksTable
}

// AS creates new UserBookmarksTable with assigned alias
func (a UserBookmarksTable) AS(alias string) *UserBookmarksTable {
	return newUserBookmarksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserBookmarksTable with assigned schema name
func (a UserBookmarksTable) FromSchema(schemaName string) *UserBookmarksTable {
	return newUserBookmarksTable(schemaName, a.TableName(), a.Alias())
}

func newUserBookmarksTable(schemaName, tableName, alias string) *UserBookmarksTable {
	return &UserBookmarksTable{
		userBookmarksTable: newUserBookmarksTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newUserBookmarksTableImpl("", "excluded", ""),
	}
}

func newUserBookmarksTableImpl(schemaName, tableName, alias string) userBookmarksTable {
	var (
		IDColumn         = postgres.StringColumn("id")
		UserIDColumn     = postgres.StringColumn("user_id")
		BookmarkIDColumn = postgres.StringColumn("bookmark_id")
		NameColumn       = postgres.StringColumn("name")
		allColumns       = postgres.ColumnList{IDColumn, UserIDColumn, BookmarkIDColumn, NameColumn}
		mutableColumns   = postgres.ColumnList{UserIDColumn, BookmarkIDColumn, NameColumn}
	)

	return userBookmarksTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		UserID:     UserIDColumn,
		BookmarkID: BookmarkIDColumn,
		Name:       NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
