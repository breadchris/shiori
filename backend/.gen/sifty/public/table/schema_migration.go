//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SchemaMigration = newSchemaMigrationTable("public", "schema_migration", "")

type schemaMigrationTable struct {
	postgres.Table

	//Columns
	Version     postgres.ColumnString
	VersionSelf postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SchemaMigrationTable struct {
	schemaMigrationTable

	EXCLUDED schemaMigrationTable
}

// AS creates new SchemaMigrationTable with assigned alias
func (a SchemaMigrationTable) AS(alias string) *SchemaMigrationTable {
	return newSchemaMigrationTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SchemaMigrationTable with assigned schema name
func (a SchemaMigrationTable) FromSchema(schemaName string) *SchemaMigrationTable {
	return newSchemaMigrationTable(schemaName, a.TableName(), a.Alias())
}

func newSchemaMigrationTable(schemaName, tableName, alias string) *SchemaMigrationTable {
	return &SchemaMigrationTable{
		schemaMigrationTable: newSchemaMigrationTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newSchemaMigrationTableImpl("", "excluded", ""),
	}
}

func newSchemaMigrationTableImpl(schemaName, tableName, alias string) schemaMigrationTable {
	var (
		VersionColumn     = postgres.StringColumn("version")
		VersionSelfColumn = postgres.IntegerColumn("version_self")
		allColumns        = postgres.ColumnList{VersionColumn, VersionSelfColumn}
		mutableColumns    = postgres.ColumnList{VersionColumn, VersionSelfColumn}
	)

	return schemaMigrationTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Version:     VersionColumn,
		VersionSelf: VersionSelfColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
