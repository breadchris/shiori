//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var IdentityRecoveryTokens = newIdentityRecoveryTokensTable("public", "identity_recovery_tokens", "")

type identityRecoveryTokensTable struct {
	postgres.Table

	//Columns
	ID                        postgres.ColumnString
	Token                     postgres.ColumnString
	Used                      postgres.ColumnBool
	UsedAt                    postgres.ColumnTimestamp
	IdentityRecoveryAddressID postgres.ColumnString
	SelfserviceRecoveryFlowID postgres.ColumnString
	CreatedAt                 postgres.ColumnTimestamp
	UpdatedAt                 postgres.ColumnTimestamp
	ExpiresAt                 postgres.ColumnTimestamp
	IssuedAt                  postgres.ColumnTimestamp
	Nid                       postgres.ColumnString
	IdentityID                postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type IdentityRecoveryTokensTable struct {
	identityRecoveryTokensTable

	EXCLUDED identityRecoveryTokensTable
}

// AS creates new IdentityRecoveryTokensTable with assigned alias
func (a IdentityRecoveryTokensTable) AS(alias string) *IdentityRecoveryTokensTable {
	return newIdentityRecoveryTokensTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new IdentityRecoveryTokensTable with assigned schema name
func (a IdentityRecoveryTokensTable) FromSchema(schemaName string) *IdentityRecoveryTokensTable {
	return newIdentityRecoveryTokensTable(schemaName, a.TableName(), a.Alias())
}

func newIdentityRecoveryTokensTable(schemaName, tableName, alias string) *IdentityRecoveryTokensTable {
	return &IdentityRecoveryTokensTable{
		identityRecoveryTokensTable: newIdentityRecoveryTokensTableImpl(schemaName, tableName, alias),
		EXCLUDED:                    newIdentityRecoveryTokensTableImpl("", "excluded", ""),
	}
}

func newIdentityRecoveryTokensTableImpl(schemaName, tableName, alias string) identityRecoveryTokensTable {
	var (
		IDColumn                        = postgres.StringColumn("id")
		TokenColumn                     = postgres.StringColumn("token")
		UsedColumn                      = postgres.BoolColumn("used")
		UsedAtColumn                    = postgres.TimestampColumn("used_at")
		IdentityRecoveryAddressIDColumn = postgres.StringColumn("identity_recovery_address_id")
		SelfserviceRecoveryFlowIDColumn = postgres.StringColumn("selfservice_recovery_flow_id")
		CreatedAtColumn                 = postgres.TimestampColumn("created_at")
		UpdatedAtColumn                 = postgres.TimestampColumn("updated_at")
		ExpiresAtColumn                 = postgres.TimestampColumn("expires_at")
		IssuedAtColumn                  = postgres.TimestampColumn("issued_at")
		NidColumn                       = postgres.StringColumn("nid")
		IdentityIDColumn                = postgres.StringColumn("identity_id")
		allColumns                      = postgres.ColumnList{IDColumn, TokenColumn, UsedColumn, UsedAtColumn, IdentityRecoveryAddressIDColumn, SelfserviceRecoveryFlowIDColumn, CreatedAtColumn, UpdatedAtColumn, ExpiresAtColumn, IssuedAtColumn, NidColumn, IdentityIDColumn}
		mutableColumns                  = postgres.ColumnList{TokenColumn, UsedColumn, UsedAtColumn, IdentityRecoveryAddressIDColumn, SelfserviceRecoveryFlowIDColumn, CreatedAtColumn, UpdatedAtColumn, ExpiresAtColumn, IssuedAtColumn, NidColumn, IdentityIDColumn}
	)

	return identityRecoveryTokensTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                        IDColumn,
		Token:                     TokenColumn,
		Used:                      UsedColumn,
		UsedAt:                    UsedAtColumn,
		IdentityRecoveryAddressID: IdentityRecoveryAddressIDColumn,
		SelfserviceRecoveryFlowID: SelfserviceRecoveryFlowIDColumn,
		CreatedAt:                 CreatedAtColumn,
		UpdatedAt:                 UpdatedAtColumn,
		ExpiresAt:                 ExpiresAtColumn,
		IssuedAt:                  IssuedAtColumn,
		Nid:                       NidColumn,
		IdentityID:                IdentityIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
