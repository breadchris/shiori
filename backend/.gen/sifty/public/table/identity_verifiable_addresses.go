//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var IdentityVerifiableAddresses = newIdentityVerifiableAddressesTable("public", "identity_verifiable_addresses", "")

type identityVerifiableAddressesTable struct {
	postgres.Table

	//Columns
	ID         postgres.ColumnString
	Status     postgres.ColumnString
	Via        postgres.ColumnString
	Verified   postgres.ColumnBool
	Value      postgres.ColumnString
	VerifiedAt postgres.ColumnTimestamp
	IdentityID postgres.ColumnString
	CreatedAt  postgres.ColumnTimestamp
	UpdatedAt  postgres.ColumnTimestamp
	Nid        postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type IdentityVerifiableAddressesTable struct {
	identityVerifiableAddressesTable

	EXCLUDED identityVerifiableAddressesTable
}

// AS creates new IdentityVerifiableAddressesTable with assigned alias
func (a IdentityVerifiableAddressesTable) AS(alias string) *IdentityVerifiableAddressesTable {
	return newIdentityVerifiableAddressesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new IdentityVerifiableAddressesTable with assigned schema name
func (a IdentityVerifiableAddressesTable) FromSchema(schemaName string) *IdentityVerifiableAddressesTable {
	return newIdentityVerifiableAddressesTable(schemaName, a.TableName(), a.Alias())
}

func newIdentityVerifiableAddressesTable(schemaName, tableName, alias string) *IdentityVerifiableAddressesTable {
	return &IdentityVerifiableAddressesTable{
		identityVerifiableAddressesTable: newIdentityVerifiableAddressesTableImpl(schemaName, tableName, alias),
		EXCLUDED:                         newIdentityVerifiableAddressesTableImpl("", "excluded", ""),
	}
}

func newIdentityVerifiableAddressesTableImpl(schemaName, tableName, alias string) identityVerifiableAddressesTable {
	var (
		IDColumn         = postgres.StringColumn("id")
		StatusColumn     = postgres.StringColumn("status")
		ViaColumn        = postgres.StringColumn("via")
		VerifiedColumn   = postgres.BoolColumn("verified")
		ValueColumn      = postgres.StringColumn("value")
		VerifiedAtColumn = postgres.TimestampColumn("verified_at")
		IdentityIDColumn = postgres.StringColumn("identity_id")
		CreatedAtColumn  = postgres.TimestampColumn("created_at")
		UpdatedAtColumn  = postgres.TimestampColumn("updated_at")
		NidColumn        = postgres.StringColumn("nid")
		allColumns       = postgres.ColumnList{IDColumn, StatusColumn, ViaColumn, VerifiedColumn, ValueColumn, VerifiedAtColumn, IdentityIDColumn, CreatedAtColumn, UpdatedAtColumn, NidColumn}
		mutableColumns   = postgres.ColumnList{StatusColumn, ViaColumn, VerifiedColumn, ValueColumn, VerifiedAtColumn, IdentityIDColumn, CreatedAtColumn, UpdatedAtColumn, NidColumn}
	)

	return identityVerifiableAddressesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Status:     StatusColumn,
		Via:        ViaColumn,
		Verified:   VerifiedColumn,
		Value:      ValueColumn,
		VerifiedAt: VerifiedAtColumn,
		IdentityID: IdentityIDColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,
		Nid:        NidColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
