//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var IdentityCredentialTypes = newIdentityCredentialTypesTable("public", "identity_credential_types", "")

type identityCredentialTypesTable struct {
	postgres.Table

	//Columns
	ID   postgres.ColumnString
	Name postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type IdentityCredentialTypesTable struct {
	identityCredentialTypesTable

	EXCLUDED identityCredentialTypesTable
}

// AS creates new IdentityCredentialTypesTable with assigned alias
func (a IdentityCredentialTypesTable) AS(alias string) *IdentityCredentialTypesTable {
	return newIdentityCredentialTypesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new IdentityCredentialTypesTable with assigned schema name
func (a IdentityCredentialTypesTable) FromSchema(schemaName string) *IdentityCredentialTypesTable {
	return newIdentityCredentialTypesTable(schemaName, a.TableName(), a.Alias())
}

func newIdentityCredentialTypesTable(schemaName, tableName, alias string) *IdentityCredentialTypesTable {
	return &IdentityCredentialTypesTable{
		identityCredentialTypesTable: newIdentityCredentialTypesTableImpl(schemaName, tableName, alias),
		EXCLUDED:                     newIdentityCredentialTypesTableImpl("", "excluded", ""),
	}
}

func newIdentityCredentialTypesTableImpl(schemaName, tableName, alias string) identityCredentialTypesTable {
	var (
		IDColumn       = postgres.StringColumn("id")
		NameColumn     = postgres.StringColumn("name")
		allColumns     = postgres.ColumnList{IDColumn, NameColumn}
		mutableColumns = postgres.ColumnList{NameColumn}
	)

	return identityCredentialTypesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:   IDColumn,
		Name: NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
