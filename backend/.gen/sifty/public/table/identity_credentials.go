//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var IdentityCredentials = newIdentityCredentialsTable("public", "identity_credentials", "")

type identityCredentialsTable struct {
	postgres.Table

	//Columns
	ID                       postgres.ColumnString
	Config                   postgres.ColumnString
	IdentityCredentialTypeID postgres.ColumnString
	IdentityID               postgres.ColumnString
	CreatedAt                postgres.ColumnTimestamp
	UpdatedAt                postgres.ColumnTimestamp
	Nid                      postgres.ColumnString
	Version                  postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type IdentityCredentialsTable struct {
	identityCredentialsTable

	EXCLUDED identityCredentialsTable
}

// AS creates new IdentityCredentialsTable with assigned alias
func (a IdentityCredentialsTable) AS(alias string) *IdentityCredentialsTable {
	return newIdentityCredentialsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new IdentityCredentialsTable with assigned schema name
func (a IdentityCredentialsTable) FromSchema(schemaName string) *IdentityCredentialsTable {
	return newIdentityCredentialsTable(schemaName, a.TableName(), a.Alias())
}

func newIdentityCredentialsTable(schemaName, tableName, alias string) *IdentityCredentialsTable {
	return &IdentityCredentialsTable{
		identityCredentialsTable: newIdentityCredentialsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                 newIdentityCredentialsTableImpl("", "excluded", ""),
	}
}

func newIdentityCredentialsTableImpl(schemaName, tableName, alias string) identityCredentialsTable {
	var (
		IDColumn                       = postgres.StringColumn("id")
		ConfigColumn                   = postgres.StringColumn("config")
		IdentityCredentialTypeIDColumn = postgres.StringColumn("identity_credential_type_id")
		IdentityIDColumn               = postgres.StringColumn("identity_id")
		CreatedAtColumn                = postgres.TimestampColumn("created_at")
		UpdatedAtColumn                = postgres.TimestampColumn("updated_at")
		NidColumn                      = postgres.StringColumn("nid")
		VersionColumn                  = postgres.IntegerColumn("version")
		allColumns                     = postgres.ColumnList{IDColumn, ConfigColumn, IdentityCredentialTypeIDColumn, IdentityIDColumn, CreatedAtColumn, UpdatedAtColumn, NidColumn, VersionColumn}
		mutableColumns                 = postgres.ColumnList{ConfigColumn, IdentityCredentialTypeIDColumn, IdentityIDColumn, CreatedAtColumn, UpdatedAtColumn, NidColumn, VersionColumn}
	)

	return identityCredentialsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                       IDColumn,
		Config:                   ConfigColumn,
		IdentityCredentialTypeID: IdentityCredentialTypeIDColumn,
		IdentityID:               IdentityIDColumn,
		CreatedAt:                CreatedAtColumn,
		UpdatedAt:                UpdatedAtColumn,
		Nid:                      NidColumn,
		Version:                  VersionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
