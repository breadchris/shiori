schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

input BookmarkQueryRequest {
  test: String!
}

type BookmarkQueryResponse {
  test: String!
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

input NewBookmark {
  url: String!
}

type SavedBookmark {
  id: ID!
  title: String!
  url: String!
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "bookmark_tags"
"""
type bookmark_tags {
  bookmark_id: uuid!
  tag_id: uuid!
}

"""
aggregated selection of "bookmark_tags"
"""
type bookmark_tags_aggregate {
  aggregate: bookmark_tags_aggregate_fields
  nodes: [bookmark_tags!]!
}

"""
aggregate fields of "bookmark_tags"
"""
type bookmark_tags_aggregate_fields {
  count(columns: [bookmark_tags_select_column!], distinct: Boolean): Int!
  max: bookmark_tags_max_fields
  min: bookmark_tags_min_fields
}

"""
order by aggregate values of table "bookmark_tags"
"""
input bookmark_tags_aggregate_order_by {
  count: order_by
  max: bookmark_tags_max_order_by
  min: bookmark_tags_min_order_by
}

"""
input type for inserting array relation for remote table "bookmark_tags"
"""
input bookmark_tags_arr_rel_insert_input {
  data: [bookmark_tags_insert_input!]!

  """upsert condition"""
  on_conflict: bookmark_tags_on_conflict
}

"""
Boolean expression to filter rows from the table "bookmark_tags". All fields are combined with a logical 'AND'.
"""
input bookmark_tags_bool_exp {
  _and: [bookmark_tags_bool_exp!]
  _not: bookmark_tags_bool_exp
  _or: [bookmark_tags_bool_exp!]
  bookmark_id: uuid_comparison_exp
  tag_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "bookmark_tags"
"""
enum bookmark_tags_constraint {
  """unique or primary key constraint"""
  bookmark_tags_pkey
}

"""
input type for inserting data into table "bookmark_tags"
"""
input bookmark_tags_insert_input {
  bookmark_id: uuid
  tag_id: uuid
}

"""aggregate max on columns"""
type bookmark_tags_max_fields {
  bookmark_id: uuid
  tag_id: uuid
}

"""
order by max() on columns of table "bookmark_tags"
"""
input bookmark_tags_max_order_by {
  bookmark_id: order_by
  tag_id: order_by
}

"""aggregate min on columns"""
type bookmark_tags_min_fields {
  bookmark_id: uuid
  tag_id: uuid
}

"""
order by min() on columns of table "bookmark_tags"
"""
input bookmark_tags_min_order_by {
  bookmark_id: order_by
  tag_id: order_by
}

"""
response of any mutation on the table "bookmark_tags"
"""
type bookmark_tags_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [bookmark_tags!]!
}

"""
on_conflict condition type for table "bookmark_tags"
"""
input bookmark_tags_on_conflict {
  constraint: bookmark_tags_constraint!
  update_columns: [bookmark_tags_update_column!]! = []
  where: bookmark_tags_bool_exp
}

"""Ordering options when selecting data from "bookmark_tags"."""
input bookmark_tags_order_by {
  bookmark_id: order_by
  tag_id: order_by
}

"""primary key columns input for table: bookmark_tags"""
input bookmark_tags_pk_columns_input {
  bookmark_id: uuid!
  tag_id: uuid!
}

"""
select columns of table "bookmark_tags"
"""
enum bookmark_tags_select_column {
  """column name"""
  bookmark_id

  """column name"""
  tag_id
}

"""
input type for updating data in table "bookmark_tags"
"""
input bookmark_tags_set_input {
  bookmark_id: uuid
  tag_id: uuid
}

"""
update columns of table "bookmark_tags"
"""
enum bookmark_tags_update_column {
  """column name"""
  bookmark_id

  """column name"""
  tag_id
}

"""
columns and relationships of "bookmarks"
"""
type bookmarks {
  author: String!

  """An array relationship"""
  bookmark_tags(
    """distinct select on columns"""
    distinct_on: [bookmark_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmark_tags_order_by!]

    """filter the rows returned"""
    where: bookmark_tags_bool_exp
  ): [bookmark_tags!]!

  """An aggregate relationship"""
  bookmark_tags_aggregate(
    """distinct select on columns"""
    distinct_on: [bookmark_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmark_tags_order_by!]

    """filter the rows returned"""
    where: bookmark_tags_bool_exp
  ): bookmark_tags_aggregate!
  content: String!
  excerpt: String!
  html: String!
  id: uuid!
  modified: timestamp!
  public: Boolean!
  title: String!
  url: String!
}

"""
aggregated selection of "bookmarks"
"""
type bookmarks_aggregate {
  aggregate: bookmarks_aggregate_fields
  nodes: [bookmarks!]!
}

"""
aggregate fields of "bookmarks"
"""
type bookmarks_aggregate_fields {
  count(columns: [bookmarks_select_column!], distinct: Boolean): Int!
  max: bookmarks_max_fields
  min: bookmarks_min_fields
}

"""
Boolean expression to filter rows from the table "bookmarks". All fields are combined with a logical 'AND'.
"""
input bookmarks_bool_exp {
  _and: [bookmarks_bool_exp!]
  _not: bookmarks_bool_exp
  _or: [bookmarks_bool_exp!]
  author: String_comparison_exp
  bookmark_tags: bookmark_tags_bool_exp
  content: String_comparison_exp
  excerpt: String_comparison_exp
  html: String_comparison_exp
  id: uuid_comparison_exp
  modified: timestamp_comparison_exp
  public: Boolean_comparison_exp
  title: String_comparison_exp
  url: String_comparison_exp
}

"""
unique or primary key constraints on table "bookmarks"
"""
enum bookmarks_constraint {
  """unique or primary key constraint"""
  bookmark_url_unique

  """unique or primary key constraint"""
  bookmarks_pkey
}

"""
input type for inserting data into table "bookmarks"
"""
input bookmarks_insert_input {
  author: String
  bookmark_tags: bookmark_tags_arr_rel_insert_input
  content: String
  excerpt: String
  html: String
  id: uuid
  modified: timestamp
  public: Boolean
  title: String
  url: String
}

"""aggregate max on columns"""
type bookmarks_max_fields {
  author: String
  content: String
  excerpt: String
  html: String
  id: uuid
  modified: timestamp
  title: String
  url: String
}

"""aggregate min on columns"""
type bookmarks_min_fields {
  author: String
  content: String
  excerpt: String
  html: String
  id: uuid
  modified: timestamp
  title: String
  url: String
}

"""
response of any mutation on the table "bookmarks"
"""
type bookmarks_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [bookmarks!]!
}

"""
input type for inserting object relation for remote table "bookmarks"
"""
input bookmarks_obj_rel_insert_input {
  data: bookmarks_insert_input!

  """upsert condition"""
  on_conflict: bookmarks_on_conflict
}

"""
on_conflict condition type for table "bookmarks"
"""
input bookmarks_on_conflict {
  constraint: bookmarks_constraint!
  update_columns: [bookmarks_update_column!]! = []
  where: bookmarks_bool_exp
}

"""Ordering options when selecting data from "bookmarks"."""
input bookmarks_order_by {
  author: order_by
  bookmark_tags_aggregate: bookmark_tags_aggregate_order_by
  content: order_by
  excerpt: order_by
  html: order_by
  id: order_by
  modified: order_by
  public: order_by
  title: order_by
  url: order_by
}

"""primary key columns input for table: bookmarks"""
input bookmarks_pk_columns_input {
  id: uuid!
}

"""
select columns of table "bookmarks"
"""
enum bookmarks_select_column {
  """column name"""
  author

  """column name"""
  content

  """column name"""
  excerpt

  """column name"""
  html

  """column name"""
  id

  """column name"""
  modified

  """column name"""
  public

  """column name"""
  title

  """column name"""
  url
}

"""
input type for updating data in table "bookmarks"
"""
input bookmarks_set_input {
  author: String
  content: String
  excerpt: String
  html: String
  id: uuid
  modified: timestamp
  public: Boolean
  title: String
  url: String
}

"""
update columns of table "bookmarks"
"""
enum bookmarks_update_column {
  """column name"""
  author

  """column name"""
  content

  """column name"""
  excerpt

  """column name"""
  html

  """column name"""
  id

  """column name"""
  modified

  """column name"""
  public

  """column name"""
  title

  """column name"""
  url
}

"""
columns and relationships of "identities"
"""
type identities {
  created_at: timestamp!
  id: uuid!
  nid: uuid
  schema_id: String!
  state: String!
  state_changed_at: timestamp
  traits(
    """JSON select path"""
    path: String
  ): jsonb!
  updated_at: timestamp!
}

"""
aggregated selection of "identities"
"""
type identities_aggregate {
  aggregate: identities_aggregate_fields
  nodes: [identities!]!
}

"""
aggregate fields of "identities"
"""
type identities_aggregate_fields {
  count(columns: [identities_select_column!], distinct: Boolean): Int!
  max: identities_max_fields
  min: identities_min_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input identities_append_input {
  traits: jsonb
}

"""
Boolean expression to filter rows from the table "identities". All fields are combined with a logical 'AND'.
"""
input identities_bool_exp {
  _and: [identities_bool_exp!]
  _not: identities_bool_exp
  _or: [identities_bool_exp!]
  created_at: timestamp_comparison_exp
  id: uuid_comparison_exp
  nid: uuid_comparison_exp
  schema_id: String_comparison_exp
  state: String_comparison_exp
  state_changed_at: timestamp_comparison_exp
  traits: jsonb_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "identities"
"""
enum identities_constraint {
  """unique or primary key constraint"""
  identities_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input identities_delete_at_path_input {
  traits: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input identities_delete_elem_input {
  traits: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input identities_delete_key_input {
  traits: String
}

"""
input type for inserting data into table "identities"
"""
input identities_insert_input {
  created_at: timestamp
  id: uuid
  nid: uuid
  schema_id: String
  state: String
  state_changed_at: timestamp
  traits: jsonb
  updated_at: timestamp
}

"""aggregate max on columns"""
type identities_max_fields {
  created_at: timestamp
  id: uuid
  nid: uuid
  schema_id: String
  state: String
  state_changed_at: timestamp
  updated_at: timestamp
}

"""aggregate min on columns"""
type identities_min_fields {
  created_at: timestamp
  id: uuid
  nid: uuid
  schema_id: String
  state: String
  state_changed_at: timestamp
  updated_at: timestamp
}

"""
response of any mutation on the table "identities"
"""
type identities_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [identities!]!
}

"""
input type for inserting object relation for remote table "identities"
"""
input identities_obj_rel_insert_input {
  data: identities_insert_input!

  """upsert condition"""
  on_conflict: identities_on_conflict
}

"""
on_conflict condition type for table "identities"
"""
input identities_on_conflict {
  constraint: identities_constraint!
  update_columns: [identities_update_column!]! = []
  where: identities_bool_exp
}

"""Ordering options when selecting data from "identities"."""
input identities_order_by {
  created_at: order_by
  id: order_by
  nid: order_by
  schema_id: order_by
  state: order_by
  state_changed_at: order_by
  traits: order_by
  updated_at: order_by
}

"""primary key columns input for table: identities"""
input identities_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input identities_prepend_input {
  traits: jsonb
}

"""
select columns of table "identities"
"""
enum identities_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  nid

  """column name"""
  schema_id

  """column name"""
  state

  """column name"""
  state_changed_at

  """column name"""
  traits

  """column name"""
  updated_at
}

"""
input type for updating data in table "identities"
"""
input identities_set_input {
  created_at: timestamp
  id: uuid
  nid: uuid
  schema_id: String
  state: String
  state_changed_at: timestamp
  traits: jsonb
  updated_at: timestamp
}

"""
update columns of table "identities"
"""
enum identities_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  nid

  """column name"""
  schema_id

  """column name"""
  state

  """column name"""
  state_changed_at

  """column name"""
  traits

  """column name"""
  updated_at
}

scalar jsonb

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "bookmark_tags"
  """
  delete_bookmark_tags(
    """filter the rows which have to be deleted"""
    where: bookmark_tags_bool_exp!
  ): bookmark_tags_mutation_response

  """
  delete single row from the table: "bookmark_tags"
  """
  delete_bookmark_tags_by_pk(bookmark_id: uuid!, tag_id: uuid!): bookmark_tags

  """
  delete data from the table: "bookmarks"
  """
  delete_bookmarks(
    """filter the rows which have to be deleted"""
    where: bookmarks_bool_exp!
  ): bookmarks_mutation_response

  """
  delete single row from the table: "bookmarks"
  """
  delete_bookmarks_by_pk(id: uuid!): bookmarks

  """
  delete data from the table: "identities"
  """
  delete_identities(
    """filter the rows which have to be deleted"""
    where: identities_bool_exp!
  ): identities_mutation_response

  """
  delete single row from the table: "identities"
  """
  delete_identities_by_pk(id: uuid!): identities

  """
  delete data from the table: "tags"
  """
  delete_tags(
    """filter the rows which have to be deleted"""
    where: tags_bool_exp!
  ): tags_mutation_response

  """
  delete single row from the table: "tags"
  """
  delete_tags_by_pk(id: uuid!): tags

  """
  delete data from the table: "user_bookmarks"
  """
  delete_user_bookmarks(
    """filter the rows which have to be deleted"""
    where: user_bookmarks_bool_exp!
  ): user_bookmarks_mutation_response

  """
  delete single row from the table: "user_bookmarks"
  """
  delete_user_bookmarks_by_pk(id: uuid!): user_bookmarks

  """
  delete data from the table: "users"
  """
  delete_users(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: uuid!): users

  """
  insert data into the table: "bookmark_tags"
  """
  insert_bookmark_tags(
    """the rows to be inserted"""
    objects: [bookmark_tags_insert_input!]!

    """upsert condition"""
    on_conflict: bookmark_tags_on_conflict
  ): bookmark_tags_mutation_response

  """
  insert a single row into the table: "bookmark_tags"
  """
  insert_bookmark_tags_one(
    """the row to be inserted"""
    object: bookmark_tags_insert_input!

    """upsert condition"""
    on_conflict: bookmark_tags_on_conflict
  ): bookmark_tags

  """
  insert data into the table: "bookmarks"
  """
  insert_bookmarks(
    """the rows to be inserted"""
    objects: [bookmarks_insert_input!]!

    """upsert condition"""
    on_conflict: bookmarks_on_conflict
  ): bookmarks_mutation_response

  """
  insert a single row into the table: "bookmarks"
  """
  insert_bookmarks_one(
    """the row to be inserted"""
    object: bookmarks_insert_input!

    """upsert condition"""
    on_conflict: bookmarks_on_conflict
  ): bookmarks

  """
  insert data into the table: "identities"
  """
  insert_identities(
    """the rows to be inserted"""
    objects: [identities_insert_input!]!

    """upsert condition"""
    on_conflict: identities_on_conflict
  ): identities_mutation_response

  """
  insert a single row into the table: "identities"
  """
  insert_identities_one(
    """the row to be inserted"""
    object: identities_insert_input!

    """upsert condition"""
    on_conflict: identities_on_conflict
  ): identities

  """
  insert data into the table: "tags"
  """
  insert_tags(
    """the rows to be inserted"""
    objects: [tags_insert_input!]!

    """upsert condition"""
    on_conflict: tags_on_conflict
  ): tags_mutation_response

  """
  insert a single row into the table: "tags"
  """
  insert_tags_one(
    """the row to be inserted"""
    object: tags_insert_input!

    """upsert condition"""
    on_conflict: tags_on_conflict
  ): tags

  """
  insert data into the table: "user_bookmarks"
  """
  insert_user_bookmarks(
    """the rows to be inserted"""
    objects: [user_bookmarks_insert_input!]!

    """upsert condition"""
    on_conflict: user_bookmarks_on_conflict
  ): user_bookmarks_mutation_response

  """
  insert a single row into the table: "user_bookmarks"
  """
  insert_user_bookmarks_one(
    """the row to be inserted"""
    object: user_bookmarks_insert_input!

    """upsert condition"""
    on_conflict: user_bookmarks_on_conflict
  ): user_bookmarks

  """
  insert data into the table: "users"
  """
  insert_users(
    """the rows to be inserted"""
    objects: [users_insert_input!]!

    """upsert condition"""
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """the row to be inserted"""
    object: users_insert_input!

    """upsert condition"""
    on_conflict: users_on_conflict
  ): users
  saveBookmark(input: NewBookmark!): SavedBookmark!

  """
  update data of the table: "bookmark_tags"
  """
  update_bookmark_tags(
    """sets the columns of the filtered rows to the given values"""
    _set: bookmark_tags_set_input

    """filter the rows which have to be updated"""
    where: bookmark_tags_bool_exp!
  ): bookmark_tags_mutation_response

  """
  update single row of the table: "bookmark_tags"
  """
  update_bookmark_tags_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: bookmark_tags_set_input
    pk_columns: bookmark_tags_pk_columns_input!
  ): bookmark_tags

  """
  update data of the table: "bookmarks"
  """
  update_bookmarks(
    """sets the columns of the filtered rows to the given values"""
    _set: bookmarks_set_input

    """filter the rows which have to be updated"""
    where: bookmarks_bool_exp!
  ): bookmarks_mutation_response

  """
  update single row of the table: "bookmarks"
  """
  update_bookmarks_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: bookmarks_set_input
    pk_columns: bookmarks_pk_columns_input!
  ): bookmarks

  """
  update data of the table: "identities"
  """
  update_identities(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: identities_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: identities_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: identities_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: identities_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: identities_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: identities_set_input

    """filter the rows which have to be updated"""
    where: identities_bool_exp!
  ): identities_mutation_response

  """
  update single row of the table: "identities"
  """
  update_identities_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: identities_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: identities_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: identities_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: identities_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: identities_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: identities_set_input
    pk_columns: identities_pk_columns_input!
  ): identities

  """
  update data of the table: "tags"
  """
  update_tags(
    """sets the columns of the filtered rows to the given values"""
    _set: tags_set_input

    """filter the rows which have to be updated"""
    where: tags_bool_exp!
  ): tags_mutation_response

  """
  update single row of the table: "tags"
  """
  update_tags_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: tags_set_input
    pk_columns: tags_pk_columns_input!
  ): tags

  """
  update data of the table: "user_bookmarks"
  """
  update_user_bookmarks(
    """sets the columns of the filtered rows to the given values"""
    _set: user_bookmarks_set_input

    """filter the rows which have to be updated"""
    where: user_bookmarks_bool_exp!
  ): user_bookmarks_mutation_response

  """
  update single row of the table: "user_bookmarks"
  """
  update_user_bookmarks_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: user_bookmarks_set_input
    pk_columns: user_bookmarks_pk_columns_input!
  ): user_bookmarks

  """
  update data of the table: "users"
  """
  update_users(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  bookmarkQuery(q: BookmarkQueryRequest): BookmarkQueryResponse!

  """An array relationship"""
  bookmark_tags(
    """distinct select on columns"""
    distinct_on: [bookmark_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmark_tags_order_by!]

    """filter the rows returned"""
    where: bookmark_tags_bool_exp
  ): [bookmark_tags!]!

  """An aggregate relationship"""
  bookmark_tags_aggregate(
    """distinct select on columns"""
    distinct_on: [bookmark_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmark_tags_order_by!]

    """filter the rows returned"""
    where: bookmark_tags_bool_exp
  ): bookmark_tags_aggregate!

  """fetch data from the table: "bookmark_tags" using primary key columns"""
  bookmark_tags_by_pk(bookmark_id: uuid!, tag_id: uuid!): bookmark_tags

  """
  fetch data from the table: "bookmarks"
  """
  bookmarks(
    """distinct select on columns"""
    distinct_on: [bookmarks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmarks_order_by!]

    """filter the rows returned"""
    where: bookmarks_bool_exp
  ): [bookmarks!]!

  """
  fetch aggregated fields from the table: "bookmarks"
  """
  bookmarks_aggregate(
    """distinct select on columns"""
    distinct_on: [bookmarks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmarks_order_by!]

    """filter the rows returned"""
    where: bookmarks_bool_exp
  ): bookmarks_aggregate!

  """fetch data from the table: "bookmarks" using primary key columns"""
  bookmarks_by_pk(id: uuid!): bookmarks

  """
  fetch data from the table: "identities"
  """
  identities(
    """distinct select on columns"""
    distinct_on: [identities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identities_order_by!]

    """filter the rows returned"""
    where: identities_bool_exp
  ): [identities!]!

  """
  fetch aggregated fields from the table: "identities"
  """
  identities_aggregate(
    """distinct select on columns"""
    distinct_on: [identities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identities_order_by!]

    """filter the rows returned"""
    where: identities_bool_exp
  ): identities_aggregate!

  """fetch data from the table: "identities" using primary key columns"""
  identities_by_pk(id: uuid!): identities

  """
  fetch data from the table: "tags"
  """
  tags(
    """distinct select on columns"""
    distinct_on: [tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tags_order_by!]

    """filter the rows returned"""
    where: tags_bool_exp
  ): [tags!]!

  """
  fetch aggregated fields from the table: "tags"
  """
  tags_aggregate(
    """distinct select on columns"""
    distinct_on: [tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tags_order_by!]

    """filter the rows returned"""
    where: tags_bool_exp
  ): tags_aggregate!

  """fetch data from the table: "tags" using primary key columns"""
  tags_by_pk(id: uuid!): tags

  """An array relationship"""
  user_bookmarks(
    """distinct select on columns"""
    distinct_on: [user_bookmarks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_bookmarks_order_by!]

    """filter the rows returned"""
    where: user_bookmarks_bool_exp
  ): [user_bookmarks!]!

  """An aggregate relationship"""
  user_bookmarks_aggregate(
    """distinct select on columns"""
    distinct_on: [user_bookmarks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_bookmarks_order_by!]

    """filter the rows returned"""
    where: user_bookmarks_bool_exp
  ): user_bookmarks_aggregate!

  """fetch data from the table: "user_bookmarks" using primary key columns"""
  user_bookmarks_by_pk(id: uuid!): user_bookmarks

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: uuid!): users
}

type subscription_root {
  """An array relationship"""
  bookmark_tags(
    """distinct select on columns"""
    distinct_on: [bookmark_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmark_tags_order_by!]

    """filter the rows returned"""
    where: bookmark_tags_bool_exp
  ): [bookmark_tags!]!

  """An aggregate relationship"""
  bookmark_tags_aggregate(
    """distinct select on columns"""
    distinct_on: [bookmark_tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmark_tags_order_by!]

    """filter the rows returned"""
    where: bookmark_tags_bool_exp
  ): bookmark_tags_aggregate!

  """fetch data from the table: "bookmark_tags" using primary key columns"""
  bookmark_tags_by_pk(bookmark_id: uuid!, tag_id: uuid!): bookmark_tags

  """
  fetch data from the table: "bookmarks"
  """
  bookmarks(
    """distinct select on columns"""
    distinct_on: [bookmarks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmarks_order_by!]

    """filter the rows returned"""
    where: bookmarks_bool_exp
  ): [bookmarks!]!

  """
  fetch aggregated fields from the table: "bookmarks"
  """
  bookmarks_aggregate(
    """distinct select on columns"""
    distinct_on: [bookmarks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmarks_order_by!]

    """filter the rows returned"""
    where: bookmarks_bool_exp
  ): bookmarks_aggregate!

  """fetch data from the table: "bookmarks" using primary key columns"""
  bookmarks_by_pk(id: uuid!): bookmarks

  """
  fetch data from the table: "identities"
  """
  identities(
    """distinct select on columns"""
    distinct_on: [identities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identities_order_by!]

    """filter the rows returned"""
    where: identities_bool_exp
  ): [identities!]!

  """
  fetch aggregated fields from the table: "identities"
  """
  identities_aggregate(
    """distinct select on columns"""
    distinct_on: [identities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identities_order_by!]

    """filter the rows returned"""
    where: identities_bool_exp
  ): identities_aggregate!

  """fetch data from the table: "identities" using primary key columns"""
  identities_by_pk(id: uuid!): identities

  """
  fetch data from the table: "tags"
  """
  tags(
    """distinct select on columns"""
    distinct_on: [tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tags_order_by!]

    """filter the rows returned"""
    where: tags_bool_exp
  ): [tags!]!

  """
  fetch aggregated fields from the table: "tags"
  """
  tags_aggregate(
    """distinct select on columns"""
    distinct_on: [tags_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tags_order_by!]

    """filter the rows returned"""
    where: tags_bool_exp
  ): tags_aggregate!

  """fetch data from the table: "tags" using primary key columns"""
  tags_by_pk(id: uuid!): tags

  """An array relationship"""
  user_bookmarks(
    """distinct select on columns"""
    distinct_on: [user_bookmarks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_bookmarks_order_by!]

    """filter the rows returned"""
    where: user_bookmarks_bool_exp
  ): [user_bookmarks!]!

  """An aggregate relationship"""
  user_bookmarks_aggregate(
    """distinct select on columns"""
    distinct_on: [user_bookmarks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_bookmarks_order_by!]

    """filter the rows returned"""
    where: user_bookmarks_bool_exp
  ): user_bookmarks_aggregate!

  """fetch data from the table: "user_bookmarks" using primary key columns"""
  user_bookmarks_by_pk(id: uuid!): user_bookmarks

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: uuid!): users
}

"""
columns and relationships of "tags"
"""
type tags {
  id: uuid!
  name: String!
}

"""
aggregated selection of "tags"
"""
type tags_aggregate {
  aggregate: tags_aggregate_fields
  nodes: [tags!]!
}

"""
aggregate fields of "tags"
"""
type tags_aggregate_fields {
  count(columns: [tags_select_column!], distinct: Boolean): Int!
  max: tags_max_fields
  min: tags_min_fields
}

"""
Boolean expression to filter rows from the table "tags". All fields are combined with a logical 'AND'.
"""
input tags_bool_exp {
  _and: [tags_bool_exp!]
  _not: tags_bool_exp
  _or: [tags_bool_exp!]
  id: uuid_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "tags"
"""
enum tags_constraint {
  """unique or primary key constraint"""
  tag_name_unique

  """unique or primary key constraint"""
  tags_pkey
}

"""
input type for inserting data into table "tags"
"""
input tags_insert_input {
  id: uuid
  name: String
}

"""aggregate max on columns"""
type tags_max_fields {
  id: uuid
  name: String
}

"""aggregate min on columns"""
type tags_min_fields {
  id: uuid
  name: String
}

"""
response of any mutation on the table "tags"
"""
type tags_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [tags!]!
}

"""
on_conflict condition type for table "tags"
"""
input tags_on_conflict {
  constraint: tags_constraint!
  update_columns: [tags_update_column!]! = []
  where: tags_bool_exp
}

"""Ordering options when selecting data from "tags"."""
input tags_order_by {
  id: order_by
  name: order_by
}

"""primary key columns input for table: tags"""
input tags_pk_columns_input {
  id: uuid!
}

"""
select columns of table "tags"
"""
enum tags_select_column {
  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "tags"
"""
input tags_set_input {
  id: uuid
  name: String
}

"""
update columns of table "tags"
"""
enum tags_update_column {
  """column name"""
  id

  """column name"""
  name
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

"""Bookmarks for a user"""
type user_bookmarks {
  """An object relationship"""
  bookmark: bookmarks!
  bookmark_id: uuid!
  id: uuid!
  name: String

  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "user_bookmarks"
"""
type user_bookmarks_aggregate {
  aggregate: user_bookmarks_aggregate_fields
  nodes: [user_bookmarks!]!
}

"""
aggregate fields of "user_bookmarks"
"""
type user_bookmarks_aggregate_fields {
  count(columns: [user_bookmarks_select_column!], distinct: Boolean): Int!
  max: user_bookmarks_max_fields
  min: user_bookmarks_min_fields
}

"""
order by aggregate values of table "user_bookmarks"
"""
input user_bookmarks_aggregate_order_by {
  count: order_by
  max: user_bookmarks_max_order_by
  min: user_bookmarks_min_order_by
}

"""
input type for inserting array relation for remote table "user_bookmarks"
"""
input user_bookmarks_arr_rel_insert_input {
  data: [user_bookmarks_insert_input!]!

  """upsert condition"""
  on_conflict: user_bookmarks_on_conflict
}

"""
Boolean expression to filter rows from the table "user_bookmarks". All fields are combined with a logical 'AND'.
"""
input user_bookmarks_bool_exp {
  _and: [user_bookmarks_bool_exp!]
  _not: user_bookmarks_bool_exp
  _or: [user_bookmarks_bool_exp!]
  bookmark: bookmarks_bool_exp
  bookmark_id: uuid_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "user_bookmarks"
"""
enum user_bookmarks_constraint {
  """unique or primary key constraint"""
  user_bookmarks_pkey
}

"""
input type for inserting data into table "user_bookmarks"
"""
input user_bookmarks_insert_input {
  bookmark: bookmarks_obj_rel_insert_input
  bookmark_id: uuid
  id: uuid
  name: String
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type user_bookmarks_max_fields {
  bookmark_id: uuid
  id: uuid
  name: String
  user_id: uuid
}

"""
order by max() on columns of table "user_bookmarks"
"""
input user_bookmarks_max_order_by {
  bookmark_id: order_by
  id: order_by
  name: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type user_bookmarks_min_fields {
  bookmark_id: uuid
  id: uuid
  name: String
  user_id: uuid
}

"""
order by min() on columns of table "user_bookmarks"
"""
input user_bookmarks_min_order_by {
  bookmark_id: order_by
  id: order_by
  name: order_by
  user_id: order_by
}

"""
response of any mutation on the table "user_bookmarks"
"""
type user_bookmarks_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user_bookmarks!]!
}

"""
on_conflict condition type for table "user_bookmarks"
"""
input user_bookmarks_on_conflict {
  constraint: user_bookmarks_constraint!
  update_columns: [user_bookmarks_update_column!]! = []
  where: user_bookmarks_bool_exp
}

"""Ordering options when selecting data from "user_bookmarks"."""
input user_bookmarks_order_by {
  bookmark: bookmarks_order_by
  bookmark_id: order_by
  id: order_by
  name: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: user_bookmarks"""
input user_bookmarks_pk_columns_input {
  id: uuid!
}

"""
select columns of table "user_bookmarks"
"""
enum user_bookmarks_select_column {
  """column name"""
  bookmark_id

  """column name"""
  id

  """column name"""
  name

  """column name"""
  user_id
}

"""
input type for updating data in table "user_bookmarks"
"""
input user_bookmarks_set_input {
  bookmark_id: uuid
  id: uuid
  name: String
  user_id: uuid
}

"""
update columns of table "user_bookmarks"
"""
enum user_bookmarks_update_column {
  """column name"""
  bookmark_id

  """column name"""
  id

  """column name"""
  name

  """column name"""
  user_id
}

"""Users for Sifty"""
type users {
  id: uuid!

  """An object relationship"""
  identity: identities!
  kratos_id: uuid!

  """An array relationship"""
  user_bookmarks(
    """distinct select on columns"""
    distinct_on: [user_bookmarks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_bookmarks_order_by!]

    """filter the rows returned"""
    where: user_bookmarks_bool_exp
  ): [user_bookmarks!]!

  """An aggregate relationship"""
  user_bookmarks_aggregate(
    """distinct select on columns"""
    distinct_on: [user_bookmarks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_bookmarks_order_by!]

    """filter the rows returned"""
    where: user_bookmarks_bool_exp
  ): user_bookmarks_aggregate!
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  count(columns: [users_select_column!], distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  id: uuid_comparison_exp
  identity: identities_bool_exp
  kratos_id: uuid_comparison_exp
  user_bookmarks: user_bookmarks_bool_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """unique or primary key constraint"""
  users_pkey
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  id: uuid
  identity: identities_obj_rel_insert_input
  kratos_id: uuid
  user_bookmarks: user_bookmarks_arr_rel_insert_input
}

"""aggregate max on columns"""
type users_max_fields {
  id: uuid
  kratos_id: uuid
}

"""aggregate min on columns"""
type users_min_fields {
  id: uuid
  kratos_id: uuid
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!

  """upsert condition"""
  on_conflict: users_on_conflict
}

"""
on_conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

"""Ordering options when selecting data from "users"."""
input users_order_by {
  id: order_by
  identity: identities_order_by
  kratos_id: order_by
  user_bookmarks_aggregate: user_bookmarks_aggregate_order_by
}

"""primary key columns input for table: users"""
input users_pk_columns_input {
  id: uuid!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """column name"""
  id

  """column name"""
  kratos_id
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  id: uuid
  kratos_id: uuid
}

"""
update columns of table "users"
"""
enum users_update_column {
  """column name"""
  id

  """column name"""
  kratos_id
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

